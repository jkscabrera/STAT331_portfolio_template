---
title: "Lab 8: 12 Days of Christmas"
author: "Jasmine Cabrera"
format:
  html:
    self-contained: true
    code-tools: true
    code-fold: true
execute:
  echo: true
  error: false
  messages: false
  warning: false
---

## 0.1 Singing the Song

Alright, so you've already created two helper functions, `pluralize_gift()` and `make_phrase()`, which you used at the end of the Practice Activity to create a column of song phrases / lines.

Today, you will use these phrases to write a function which sings the lines of song for a given day. We will then use this function to iterate through the 12 days of Christmas to get our song!

```{r load data & packages}

library(dplyr)
library(glue)
library(stringr)
library(purrr)
library(english)


xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")

```

## Function 1: Pluralize Gifts

```{r pluralize gifts}

pluralize_gift <- function(gift){
gift <- 
  case_when(
    str_detect(gift, "oo") ~ str_replace(gift, "oo", "ee"),
    str_detect(gift, "y$") ~ str_replace(gift, "y$", "ies"),
    TRUE ~ str_c(gift, "s", sep = "")
  )
return(gift)
}

```

## Function 2: Make Phrase

```{r make phrase}

make_phrase <- function(day, num_word, item, verb, adjective, location) {
## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
## Step 2: If the day is larger than 1, the items need pluralized! 
  if (day > 1){
    item <- pluralize_gift(item)
  }
  num_word <- english(day)
  
## Step 3: If the day is 1, you need to add an "a" or "an" before the gift 
  items_w_vowels <- str_detect(item, "^[aeiou]")
  if (day == 1){
    if (items_w_vowels == TRUE){
      item <- str_c("an", item, sep = " ")
    }
    else {
      item <- str_c("a", item, sep = " ")
    }  
  }

## Step 4: Glue all of the pieces together to make a phrase! 
  if (day == 1){
  return(glue::glue("{adjective}{item}{verb} {location}"))
  }
  if (day >= 2 && day<= 5){
  return(glue::glue("{num_word} {adjective} {item} {verb} {location}"))
  }
  else{
  return(glue::glue("{num_word} {item} {verb} {location}"))
  }
}

```

## Create Full.Phrase

```{r}
xmas2 <- xmas |>
  mutate(Full.Phrase = pmap_chr(.l = list(day = Day,
                                          num_word = Day.in.Words,
                                          item = Gift.Item,
                                          verb = Verb,
                                          adjective = Adjective,
                                          location = Location), 
                                .f = make_phrase))
```

## 1 Step Three: Iteration

Write a function called `sing_day()` that takes as input:

-   A dataset (input as a dataframe)

-   A number indicating which day to sing about (input as an integer)

-   The name of a column in the dataset that contains the phrases for each day (input as an **tidy** name)

For example,

    sing_day(xmas2, 2, Full.Phrase)

should return

    On the second day of Christmas, my true love sent to me:
    two turtle doves and
    a partridge in a pear tree.

## Function 3: Sing Phrases

```{r sing function}

sing_line <- function(dataset, line, phrase_col){
  
  num_word <- ordinal(line)
  intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me:")
  
  # Step 2: Sing the gift phrases
    phrases <- dataset |>
      slice(rev(row_number())) |>
      tail(n = line) |>
      pull({{phrase_col}}) 
    
    day_one <- phrases |>
      tail(n = 1)
    
    phrases <- phrases |>
      head(line - 1)

    phrases <- trimws(phrases)
    keep_phrase <- str_flatten(phrases, collapse = ", ")
    
    if (line != 1){
      day_one <- str_c("and ", day_one)
      if (line == 2){
        return(glue::glue("{intro} {keep_phrase} {day_one}."))
      }
       
      else {
        return(glue::glue("{intro} {keep_phrase}, {day_one}."))
      }
      
    }
    
    else {
      return(glue::glue("{intro} {day_one}."))
    }
    }
```

**Source:**

https://dplyr.tidyverse.org/reference/slice.html

https://stackoverflow.com/questions/56398414/invert-rows-using-dplyr

https://www.digitalocean.com/community/tutorials/head-and-tail-function-r

https://stringr.tidyverse.org/reference/str_flatten.html

## 1.1 A Small Test

```{r}
xmas2 |>
sing_line(line = 2, phrase_col = Full.Phrase)
```

## 2 Step Four: Use Your Functions!

Now that you've written your `sing_line()` function, it is time to use it to sing the entire 12 Days of Christmas song. To do this, you will need to iterate over each day of the 12 days, to obtain the lyrics for that day.

## Function 4: Sing Song

```{r}
song_create <- function(n){
song <- map_chr(.x = 1:n,
                .f = ~ sing_line(dataset = xmas2,
                            line = .x,
                            phrase_col = Full.Phrase)) |>
  str_c(collapse = "\n\n")


return(glue::glue("{song}"))
}

song_create(12)
```
