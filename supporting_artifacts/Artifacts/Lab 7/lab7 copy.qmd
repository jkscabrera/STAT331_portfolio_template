---
title: "Lab 7: Functions and Fish"
author: "Jasmine Cabrera"
format:
  html:
    self-contained: true
    code-tools: true
    code-fold: true
execute:
  echo: true
  error: false
  messages: false
  warning: false
---

## 1.0 The Data

This lab's data set concerns mark-recapture data on fish from the Blackfoot River, outside of Helena, Montana.

Mark-recapture is a common method used by Ecologists to estimate an animal population's size, when it is impossible to conduct a census (count every animal). This method works by "tagging" animals with a tracking device, so scientists can track their movement and / or presence.

```{r load data}
library(tidyverse)
library(here)
library(scales)

blackfoot <- read_csv(here("data", "BlackfootFish.csv"))
```

## 2.0 Part One: Summaries and Plots (Midterm Review)

### 2.1 Summarizing Missing Data

The measurements of each fish captured were taken by a Biologist on a raft. This lack of "laboratory setting" opens the door to the possibility of measurement errors.

-   What variable(s) have missing values present?

-   How many observations within each variable have missing values?

Output both pieces of information in one table!

```{r missing data}
NAsum <- blackfoot |>
  mutate(across(.cols = trip : species, 
                ~ sum(is.na(.x)))) |>
  pivot_longer("trip" : "species",
               names_to = "Variable Name",
               values_to = "Missing Values")
head(NAsum)
```

**Answer:** The only variable with missing values is the weight variable with 1,796 observations of missing values. All other variables in the data set have 0 observations of missing values.

### 2.2 Visualizing Missing Data

Unfortunately, these missing values are not for only one year, trip, or section of river.

Create a thoughtful visualization exploring the frequency of missing values across the different years, sections, and trips.

```{r visualizing data}
visualizing <- blackfoot |>
  filter(if_any(.cols = trip : species,
                ~ is.na(.x))) |>
  mutate(trip = as.factor(trip),
         year = as.factor(year)) |>
  rename("Trip" = trip) 

ggplot(data = visualizing, 
       mapping = aes(x = year,
                     fill = section)) +
  geom_bar() +
  facet_wrap(~ Trip,
             labeller = labeller(Trip = label_both)) +
        labs(x = "Year",
             y = NULL,
             title = "Observations with Missing Values",
             fill = "Section") +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  scale_fill_manual(values = c("#73E289",
                               "#768CE5"))

```

**Sources:**

tidyverse.org/blog/2021/02/dplyr-1-0-4-if-any/

https://www.tidyverse.org/blog/2021/02/dplyr-1-0-4-if-any/

https://ggplot2.tidyverse.org/reference/labeller.html

## 3.0 Part Two: Adjusting the Data (Function Writing)

The following `R` code would carry out this rescaling procedure for the `length` and `weight` columns of the data:

    BlackfootFish <- BlackfootFish |> 
      mutate(length = (length - min(length, na.rm = TRUE)) / 
               (max(length, na.rm = TRUE) - min(length)), 
             weight = (weight - min(weight, na.rm = TRUE)) / 
               (max(weight, na.rm = TRUE) - min(length, na.rm = TRUE))
             )

This process of duplicating an action multiple times makes it difficult to understand the intent of the process. Additionally, it makes it very difficult to spot the mistakes. *Did you spot the mistake in the weight conversion?*

Often you will find yourself in the position of needing to find a function that performs a specific task, but you do not know of a function or a library that would help you. You could spend time Googling for a solution, but in the amount of time it takes you to find something you could have already written your own function!

### 3.1 Writing a Function

Let's transform the repeated process above into a `rescale_01()` function.

-   The function should take a single vector as its input.

-   The function should return the rescaled vector.

```{r rescale_01}
rescale_01 <- function(vec){

  stopifnot(is.numeric(vec), length(vec) > 1)

  max = max(vec, na.rm = TRUE)
  min = min(vec, na.rm = TRUE)
  
  return ((vec - min) / (max - min))
}

test <- c(0, 1, 4, 3, 10)
test1 <- c(0, 1, 4, 9, 20, 100)

rescale_01(test)
rescale_01(test1)
```

### 3.2 Adding Stops

Now, let's incorporate some checks into your function! Modify your previous code to create the following checks:

-   the function should stop if the input vector is not numeric

-   the function should stop if the length of the vector is not greater than 1

**No need to write code here, simply add these stops to your code from Task 1!**

### 3.3 Performing a Simple Test

First, test your function on the simple vector below. **Add code** that verifies the maximum of your rescaled vector is 1 and the minimum is 0!

```{r rescale_01 test}
x <- c(1:85, NA)

rescale_01(x)
```

### 3.4 Performing a More Difficult Test

Next, let's test the function on the `length` column of the `BlackfootFish` data set.

Make plots of the original values of `length` and the rescaled values of `length`. Output your plots **stacked vertically**, so the reader can confirm the only aspect that has changed is the scale.

```{r rescale_01 length}
#| layout-nrow: 2
ggplot(data = blackfoot,
       mapping = aes(x = 1:nrow(blackfoot),
                     y = length)) +
  geom_point() +
  labs(x = "Observation Number",
       y = NULL,
       title = "Length of Blackfoot Fish")

ggplot(data = blackfoot,
       mapping = aes(x = 1:nrow(blackfoot),
                     y = rescale_01(length))) +
  geom_point() +
  labs(x = "Observation Number",
       y = NULL,
       title = "Rescaled Length of Blackfoot Fish")
```

**Sources:**

https://statisticsglobe.com/plot-only-one-variable-in-ggplot2-plot-r

### 3.5 Incorporating Variables

Suppose you would like to make a more general `rescale_column()` function that perform operations on any variable within a data set. Ideally, your function would take a dataframe and a variable name as inputs and return a dataframe where the variable has been rescaled.

Create a `rescale_column()` that accepts two arguments:

1.  a data frame

2.  the name(s) of the variable(s) to be rescaled

The body of the function should call the original `rescale_01()` function you wrote previously.

```{r rescale_column}
rescale_column <- function(dataframe, variables){
  stopifnot(is.data.frame(dataframe))
  
  dataframe <- dataframe |>
    mutate(across(.cols = {{variables}},
                  ~ rescale_01(.x))) 
  
  return(dataframe)
}
```

### 3.6 Another Function Test

Alright, now let's put your `rescale_column()` function to work! Use your `rescale_column()` function to rescale **both** the `length` and `weight` columns.

I expect that you carry out this process by calling the `rescale()` function *one* time!

I advise against using functions like `mutate_at()`, which have been superseded.

```{r rescale_column test}
rescale_col_test <- blackfoot |>
  rescale_column(length:weight) |>
  mutate(id = seq_along(1:nrow(blackfoot))) |>
  select(id, length:weight)


rescale_confirm <- blackfoot |>
  mutate(across(.cols = length:weight,
                ~ rescale(.x, 
                          to = c(0,1),
                          from = range(.x, 
                                       na.rm = TRUE, 
                                       finite = TRUE)))) |>
  mutate(id = seq_along(1:nrow(blackfoot))) |>
  select(id, length:weight) |>
  rename("rescale(length)" = "length",
         "rescale(weight)" = "weight")


rescale_compare <- full_join(rescale_col_test, rescale_confirm, by = "id") 
rescale_compare <- rescale_compare |>
  select("weight", "rescale(weight)", "length", "rescale(length)")
rescale_compare
```

**Answer:** The weight and length columns are the Blackfoot fish columns adjusted using my function rescale_column(), whereas, the rescale_weight() and rescale_length() columns are the Blackfoot fish columns adjusted using the rescale() function. We know the rescale_column works correctly because looking at the corresponding columns side by side, they are equivalent.
