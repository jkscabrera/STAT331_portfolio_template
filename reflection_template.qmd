---
title: "STAT 331 Portfolio"
author: "Jasmine Cabrera"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r wd-1-csv}

# Lab 2 (Question 1)
surveys <- read_csv(here("surveys.csv"))

# Lab 3 (Question 1)
hiphop <- read_csv(here("hiphop.csv"))

  
```

-   `xlsx`

```{r wd-1-xlsx}

# Practice Activity 3 (Question 1)
library(readxl) 
library(tidyverse)

military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip = 7, 
                      n_max = 190)


```

-   `txt`

```{r wd-1-txt}

# Practice Activity 5.2
```

**WD-2: I can select necessary columns from a dataset.**

```{r wd-2}

# Lab 2 (Question 4)
weight <- surveys$weight
ftlength <- surveys$hindfoot_length

ggplot(data = surveys) +
  geom_point(mapping = aes(x = weight, 
                           y = ftlength)) +
  labs(title = "Relationship Between Weight and Hindfoot Length",
       x = "Weight (g)",
       y = "Hindfoot Length (mm)")



# Lab 3 (Question 5)
hiphop_clean <- hiphop |>
  select(
    word, subj, sex, age, ethnic, familiarity, trial, fam1, popularityScore, 
    city, county, bieber) |>
  mutate(
    familarity = as.factor(familiarity))


```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-3-numeric}

# Lab 3 (Question 11)
hiphop_clean |>
  filter(age < 20, 
         familiarity == 5) |>
  count(word, sort = TRUE)


```

-   character -- specifically a string

```{r wd-3-string}

# Lab 3 (Question 12)
hiphop_clean |>
  filter(ethnic != "white", 
         sex == "Female",
         familiarity == 5) |>
  count(word, sort = TRUE)


```

-   factor

```{r wd-3-factor}

# Lab 3 (Question 11)
hiphop_clean |>
  filter(age < 20, 
         familiarity == 5) |>
  count(word, sort = TRUE)


```

-   date

```{r wd-3-date}

# Practicy Activity 5.1 (Question 4)
Iceland <- with_tz(suspects$Time.Spotted, tzone = "Iceland")
suspects <- suspects |>
  filter(pm(Iceland) == TRUE,
         day(Time.Spotted) %in% c(22, 23, 24))


```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}

```

-   character -- specifically a string

```{r wd-4-string}

# Lab 3 (Question 7)
hiphop_clean <- hiphop_clean |>
  mutate(ethnic_bin = 
           case_when(ethnic == "white" ~ "white",
                           TRUE ~ "non-white"))


```

-   factor

```{r wd-4-factor}

# Lab 3 (Question 5)
hiphop_clean <- hiphop |>
  select(
    word, subj, sex, age, ethnic, familiarity, trial, fam1, popularityScore, 
    city, county, bieber) |>
  mutate(
    familarity = as.factor(familiarity))
```

-   date

```{r wd-4-date}

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}

```

-   `right_join()`

```{r wd-5-right}

```

-   `inner_join()`

```{r wd-5-inner}

```

-   `full_join()`

```{r wd-5-full}

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r wd-6-semi}

# Lab 4 (Question 5)
bigfive <- metro_avo |>
  semi_join(metro_total, 
            by = "region")


```

-   `anti_join()`

```{r wd-6-anti}

# Lab 4 (Question 2)
metro_avo <- avocado |>
  anti_join(unwanted, by = "region") |>
  anti_join(major_region, by = "region")


```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r wd-7-long}

# Lab 4 (Question 6)
cal_avos <- metro_avo |>
  filter(region %in% c("LosAngeles", 
                       "SanDiego",
                       "Sacramento",
                       "SanFrancisco")) |>
  select(Date, type, region, AveragePrice) |>
  pivot_wider(names_from = type, 
              values_from = AveragePrice) |>
  group_by(region) |>
  summarize(avg_conventional = mean(conventional),
            avg_organic = mean(organic))


```

-   `pivot_wider()`

```{r wd-7-wide}

# Lab 4 (Question 6)
cal_avos |>
  pivot_longer(avg_conventional : avg_organic,
               names_to = "type",
               values_to = "price") |>
  ggplot(mapping = aes(x = region,
                       y = price,
                       fill = type)) +
  geom_bar(stat = "identity",
           position = position_dodge(),
           width = 0.6) +
  labs(x = "City in California",
       y = "Avocado Price (USD)",
       title = "Average Price of Convential & Organic Avocados",
       fill = "Avocado Type") 

# Lab 4 (Question 6)
cal_avos <- metro_avo |>
  filter(region %in% c("LosAngeles", 
                       "SanDiego",
                       "Sacramento",
                       "SanFrancisco")) |>
  select(Date, type, region, AveragePrice) |>
  pivot_wider(names_from = type, 
              values_from = AveragePrice) |>
  group_by(region) |>
  summarize(avg_conventional = mean(conventional),
            avg_organic = mean(organic))

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example 1

```{r r-2-1}

```

-   Example 2

```{r r-2-2}

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

```{r r-3-1}

# Challenge 3 (Question 1)
findbieber <- hiphop_clean |>
  distinct(subj, .keep_all = TRUE)

findbieber |>
  filter(sex == "Male",
         between(age, 17, 23),
         ethnic == "white",
         between(city, 10000, 60000)) |>
  slice_max(bieber)


```

-   Example 2

```{r r-3-2}

# Challenge 2 (Question 1)
weight <- surveys$weight
ftlength <- surveys$hindfoot_length
species <- surveys$species


```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

```{r dvs-1-num}

```

-   numeric variables and categorical variables

```{r dvs-2-num-cat}

```

-   categorical variables

```{r dvs-2-cat}

```

-   dates

```{r dvs-2-date}

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

```{r dvs-2-1}

```

-   Example 2

```{r dvs-2-2}

```

**DVS-3: I show creativity in my visualizations**

-   Example 1

```{r dvs-3-1}

```

-   Example 2

```{r dvs-3-2}

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

```{r dvs-4-1}

```

-   Example 2

```{r dvs-4-2}

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r dvs-5-1}

# Challenge 3 (Question 1)
```

-   Example 2

```{r dvs-5-2}

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r dvs-6-1}

```

-   Example 2

```{r dvs-6-2}

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}

```

-   Example 2

```{r dvs-7-2}

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}

```

-   `across()`

```{r pe-1-across}

```

-   `map()` functions

```{r pe-1-map-1}

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1}

```

-   Example 2

```{r pe2-2}

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r pe-3-across}

# Challenge 3 (Question 1)
hiphop_male <- hiphop |>
  distinct(subj, .keep_all = TRUE) |>
  group_by(sex) |>
  summarize(
    across(
      intl:unclassifiable,
      mean,
      na.rm = TRUE
    )
  )
head(hiphop_male)


```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1}

# n/a

```

```{r pe-3-map-2}

# n/a

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1}

```

-   Example 2

```{r pe-4-2}

```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1}

```

-   Example 2

```{r dsm-1-2}

```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1}

```

-   Example 2

```{r dsm-2-2}

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

![Discord - Week 2 Lab Assignment Channel](images/Screen%20Shot%202023-02-16%20at%2010.04.44%20AM.png)

![Discord - Week 3 Lab Assignment Channel](images/Screen%20Shot%202023-02-16%20at%2010.06.05%20AM.png)
